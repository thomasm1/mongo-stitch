https://jsonplaceholder.typicode.com/

var public_key = 'apitesti';
var private_key = 'asdasdasd123';

var CryptoJS = require('crypto-js');    	// npm install crypto-js
var Base64 = require('js-base64').Base64;   // npm install js-base64
var HTTPS = require('https');

var timestamp = Math.floor(new Date()/1000);
	
####  MARVEL COMICS
5fbd9e22b0c348faa25fd3d07bee8248

private key
dce73dc128d232d3a6c22decdf3b5f272bbc5178

http(s)://gateway.marvel.com/.
GET /v1/public/characters     Fetches lists of characters.
GET /v1/public/characters/{characterId}
GET /v1/public/characters/{characterId}/series
GET /v1/public/stories/{storyId}/characters

GET /v1/public/comics/{comicId}/characters

	Request Url: http://gateway.marvel.com/v1/public/comics
	Request Method: GET
	Params: {
	  "apikey": "your api key",
	  "ts": "a timestamp",
	  "hash": "your hash"
	}
	Headers: {
	  Accept: */*
	}
Initial response:

Status Code: 200
Access-Control-Allow-Origin: *
Date: Wed, 18 Dec 2013 22:00:55 GMT
Connection: keep-alive
ETag: f0fbae65eb2f8f28bdeea0a29be8749a4e67acb3
Content-Length: 54943
Content-Type: application/json


	Subsequent request:

	Request Url: http://gateway.marvel.com/v1/public/comics
	Request Method: GET
	Params: {
	  "apikey": "your api key",
	  "ts": "a timestamp",
	  "hash": "your hash"
	}
	Headers: {
	  Accept: */*
	  If-None-Match: f0fbae65eb2f8f28bdeea0a29be8749a4e67acb3
	}


Subsequent response:

Status Code: 304
Access-Control-Allow-Origin: *
Date: Wed, 18 Dec 2013 22:03:20 GMT
Connection: keep-alive
ETag: f0fbae65eb2f8f28bdeea0a29be8749a4e67acb3

	Cross-origin requests and JSONP
	Responses returned by the Marvel Comics API are compliant with the W3C CORS specification, which allows any properly-authorized requests to be made from any origin domain. This means that you should not need to wrap calls in JSONP callbacks in order to make calls from browser-based applications. If you do prefer to use JSONP, however, all endpoints will accept a callback parameter to all endpoints that will wrap results in a JSONP wrapper.

	Examples
	Without a callback:

	Request: GET http://gateway.marvel.com/v1/public/comics?apikey=yourAPIKEY
	Response:
	{
	  "code": 200,
	  "status": "Ok",
	  "etag": "f0fbae65eb2f8f28bdeea0a29be8749a4e67acb3",
	  "data": {
	  â€¦ [other data points]
	}

"thumbnail": {
  "path": "http://i.annihil.us/u/prod/marvel/i/mg/3/40/4bb4680432f73",
  "extension": "jpg"
}




//////// OLD APIs ///////////////// OLD APIs ///////////////// OLD APIs //////////////
 ///////////////// OLD APIs ///////////////// OLD APIs ///////////////// OLD APIs //// 
 
//////// OLD APIs /////////
      let already = false;
      let showNasa = function () {
        document.getElementById("marsreader").style.display = (already==false) ? getNasa() : "block";
      }

      let hideNasa = function () {
        document.getElementById("marsreader").style.display = "none";
      }
    let doAjax = function () {
        console.log("working")
        let xhttp = new XMLHttpRequest();

        let randomNum = Math.floor(Math.random() * 87 + 1);

        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                let char = JSON.parse(this.responseText);
                console.log(char);
                document.getElementById("name").innerHTML = char.name;
                document.getElementById("height").innerHTML = char.height;
                document.getElementById("eyes").innerHTML = char.eye_color;
                let eyecolor = char.eye_color;
                console.log(eyecolor);
                eyecolor = (eyecolor == 'hazel')? '#826f4f': eyecolor;
                console.log(eyecolor);
                document.getElementById("eyecolor").style.backgroundColor = eyecolor;
                document.getElementById("skin").innerHTML = char.skin_color;
            }
        }

        xhttp.open("GET", "https://swapi.co/api/people/" + randomNum + "/?format=json", true);

        xhttp.send();


    }  
	
      let getNasa = function () {
        // OLD_KEY: NNKOjkoul8n1CH18TWA9gwngW1s1SmjESPjNoUFo   https://api.nasa.gov/
        // NEW_KEY: p2o1kCukELyMEhVm912JFO17GgidlBIx4dhi4Ppu   https://api.nasa.gov/
        let url = "https://api.nasa.gov/planetary/apod?api_key=mF6DQEqY3WtCubgab5P2otQQ6bP1b8nY24VmiJw0";
        let x = new XMLHttpRequest();

        x.onreadystatechange = function () {

          if (x.readyState == 4 && (x.statusText == 200 || "OK")) {
            console.log("XMLHttpRequest().readyState: " + x.readyState, "XMLHttpRequest().statusText: " + x.statusText);
            already = true;
            const result = JSON.parse(this.responseText);

            document.getElementById("marsreader").style.display = "block";
            if (result.copyright != "") {
              document.getElementById("copyright").innerHTML = "Image Credits: " + result.copyright;
            }
            else {
              document.getElementById("copyright").innerHTML = "Image Credits: " + "Public Domain";
            }

            if (result.media_type == "video") {
              document.getElementById("apod_img_id").style.display = "none";
              document.getElementById("apod_vid_id").setAttribute("src", result.url);
            }
            else {
              document.getElementById("apod_vid_id").style.display = "none";
              document.getElementById("apod_img_id").setAttribute("src", result.url);
            }
            document.getElementById("reqObject").text = url;
            document.getElementById("returnObject").innerHTML = JSON.stringify(result, null, 4);

            document.getElementById("apod_explaination").innerHTML = result.explanation;
            document.getElementById("apod_title").innerHTML = result.title;
          }
        }
        x.open("GET", url, true);
        x.send();
      }  
        // $.ajax({
        //   url: url,
        //   success: function(result){
        //   if("copyright" in result) {
        //     $("#copyright").text("Image Credits: " + result.copyright);
        //   }
        //   else {
        //     $("#copyright").text("Image Credits: " + "Public Domain");
        //   } 
        //   if(result.media_type == "video") {
        //     $("#apod_img_id").css("display", "none"); 
        //     $("#apod_vid_id").attr("src", result.url);
        //   }
        //   else {
        //     $("#apod_vid_id").css("display", "none"); 
        //     $("#apod_img_id").attr("src", result.url);
        //   }
        //   $("#reqObject").text(url);
        //   $("#returnObject").text(JSON.stringify(result, null, 4));  
        //   $("#apod_explaination").text(result.explanation);
        //   $("#apod_title").text(result.title);
        // }
        // }); 
/////////////////////